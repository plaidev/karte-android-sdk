# Android CircleCI 2.0 configuration file
#
version: 2.1

orbs:
  android: circleci/android@2.2.0

commands:
  add_google_services:
    steps:
      - run:
          name: Write dummy google-services.json
          command: |
            echo '{"project_info":{"project_number":"xxx","project_id":"xxx"},"client":[{"client_info":{"mobilesdk_app_id":"xxx","android_client_info":{"package_name":"io.karte.tracker_sample"}},"api_key":[{"current_key":"xxx"}]}]}' > examples/sample_java/google-services.json
            cp examples/sample_java/google-services.json examples/sample_kotlin/google-services.json
      - run:
          name: Build modules
          command: ./gradlew --stacktrace assembleDebug assembleRelease

  run_lint:
    steps:
      - run:
          name: Lint
          command: |
            ./gradlew --stacktrace lintRelease
            ./gradlew --stacktrace ktlint

  run_doc_check:
    steps:
      - run:
          name: Doc check
          command: ./gradlew dokkaHtml

  run_static_analysis:
    steps:
      - run:
          name: CodeCov
          command: |
            ./gradlew jacocoMerge
            curl -s https://codecov.io/bash > codecov
            VERSION=$(grep '^VERSION=\"[0-9\.]*\"' codecov | awk -F '"' '{print $2}')
            shasum -c --ignore-missing <(curl -s https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA256SUM)

jobs:
  test:
    executor:
      name: android/android-machine
      tag: 2023.02.1
    steps:
      - checkout
      - add_google_services
      - run_lint
      - run_doc_check
      - run_static_analysis
      - android/restore-gradle-cache
      - android/restore-build-cache
      - android/run-tests:
          test-command: ./gradlew --stacktrace --info testDebug
      - android/save-gradle-cache
      - android/save-build-cache
      - run:
          name: Collect test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  ui_test:
    executor:
      name: android/android-machine
      tag: 2023.02.1
    steps:
      - checkout
      - run:
          name: Request Ui Test
          command: |
            curl -u ${CIRCLECI_KEY} \
                -d build_parameters[CIRCLE_JOB]=e2e-test \
                -d build_parameters[RELEASE_BRANCH]=${CIRCLE_BRANCH} \
                ${UI_TEST_ENDPOINT}

  publish_docs:
    executor:
      name: android/android-machine
      tag: 2023.02.1
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - run:
          name: Generate and Publish docs
          command: |
            git config --global user.name "${GITHUB_USER_NAME}"
            git config --global user.email "${GITHUB_USER_EMAIL}"
            ./gradlew publishDocs
      - android/save-gradle-cache

  publish:
    executor:
      name: android/android-machine
      tag: 2023.02.1
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Decrypt properties
          # encrypt to update(OpenSSL 1.1.1):
          # openssl aes-256-cbc -e -md sha512 -pbkdf2 -iter 100000 -salt -in buildscripts/gradle.properties -out buildscripts/encrypted.properties -k $ENCRYPT_KEY
          command: |
            mkdir -p ~/.gradle
            openssl aes-256-cbc -d -md sha512 -pbkdf2 -iter 100000 -salt -in buildscripts/encrypted.properties -k $ENCRYPT_KEY >> ~/.gradle/gradle.properties
      - run:
          name: Decrypt GPG key
          # export gpg private key:
          # gpg --export-secret-keys <key_id> | base64 | pbcopy
          command: echo "$GPG_KEY" | base64 -d > secret-keys.gpg
      - run:
          name: Publish
          command: bash ./scripts/publish.sh
      - android/save-gradle-cache

workflows:
  build_and_test:
    when: # Execute only public repository
      equal: [ "https://github.com/plaidev/karte-android-sdk", << pipeline.project.git_url >> ]
    jobs:
      - test
  build_and_deploy:
    unless: # Don't execute public repository
      equal: [ "https://github.com/plaidev/karte-android-sdk", << pipeline.project.git_url >> ]
    jobs:
      - test
      - ui_test:
          filters:
            branches:
              only:
                - develop
      - publish_docs:
          filters:
            branches:
              only:
                - master
      - publish:
          requires:
            - test
          filters:
            branches:
              only:
                - master
