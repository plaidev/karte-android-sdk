# Android CircleCI 2.0 configuration file
#
version: 2.1

# Pipeline parameters for manual workflows
parameters:
  workflow_name:
    type: string
    default: ""
  modules:
    type: string
    default: ""

orbs:
  android: circleci/android@2.2.0

executors:
  test-executor:
    docker:
      - image: cimg/android:2024.01.1
        environment:
          GRADLE_OPTS: -Xmx6G
    resource_class: large


commands:
  add_google_services:
    steps:
      - run:
          name: Write dummy google-services.json
          command: |
            echo '{"project_info":{"project_number":"xxx","project_id":"xxx"},"client":[{"client_info":{"mobilesdk_app_id":"xxx","android_client_info":{"package_name":"io.karte.tracker_sample"}},"api_key":[{"current_key":"xxx"}]}]}' > examples/sample_java/google-services.json
            cp examples/sample_java/google-services.json examples/sample_kotlin/google-services.json

  run_build:
    steps:
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - run:
          name: Build modules
          command: ./gradlew --stacktrace assembleDebug assembleRelease --parallel --max-workers=4

  run_lint:
    steps:
      - run:
          name: Lint
          command: |
            ./gradlew --stacktrace lintRelease
            ./gradlew --stacktrace ktlint

  run_doc_check:
    steps:
      - run:
          name: Doc check
          command: ./gradlew dokkaHtml --parallel --max-workers=4

  run_api_check:
    steps:
      - run:
          name: API check
          command:
            ./gradlew apiCheck -q || (echo "❌ apiCheck failed, If there are intended differences in the public API, you can run ./gradlew apiDump and commit the output. See more details https://github.com/Kotlin/binary-compatibility-validator." && exit 1)

  run_static_analysis:
    steps:
      - run:
          name: CodeCov
          command: |
            ./gradlew jacocoMerge
            curl -s https://codecov.io/bash > codecov
            VERSION=$(grep '^VERSION=\"[0-9\.]*\"' codecov | awk -F '"' '{print $2}')
            shasum -c --ignore-missing <(curl -s https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA256SUM)

jobs:
  test:
    executor: test-executor
    environment:
      GRADLE_OPTS: -Xmx6G
    steps:
      - checkout
      - add_google_services
      - android/restore-gradle-cache
      - android/restore-build-cache
      - run_build
      - run_lint
      - run_doc_check
      - run_api_check
      - android/run-tests:
          test-command: ./gradlew --stacktrace --info testDebug --parallel --max-workers=4
      - run_static_analysis
      - android/save-gradle-cache
      - android/save-build-cache
      - run:
          name: Collect test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  publish_docs:
    executor:
      name: android/android-machine
      tag: 2024.01.1
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - run:
          name: Generate and Publish docs
          command: |
            git config --global user.name "${GITHUB_USER_NAME}"
            git config --global user.email "${GITHUB_USER_EMAIL}"
            ./gradlew publishDocs
      - android/save-gradle-cache

  publish:
    executor:
      name: android/android-machine
      tag: 2024.01.1
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Decrypt properties
          # encrypt to update(OpenSSL 1.1.1):
          # openssl aes-256-cbc -e -md sha512 -pbkdf2 -iter 100000 -salt -in buildscripts/gradle.properties -out buildscripts/encrypted.properties -k $ENCRYPT_KEY
          command: |
            mkdir -p ~/.gradle
            openssl aes-256-cbc -d -md sha512 -pbkdf2 -iter 100000 -salt -in buildscripts/encrypted.properties -k $ENCRYPT_KEY >> ~/.gradle/gradle.properties
      - run:
          name: Decrypt GPG key
          # export gpg private key:
          # gpg --export-secret-keys <key_id> | base64 | pbcopy
          command: echo "$GPG_KEY" | base64 -d > secret-keys.gpg
      - run:
          name: Publish
          command: bash ./scripts/publish.sh
      - android/save-gradle-cache

  # Manual operation jobs for publish recovery
  manual_create_tags:
    executor:
      name: android/android-machine
      tag: 2024.01.1
    parameters:
      modules:
        type: string
        default: ""
        description: "Space-separated list of modules to tag (e.g., 'core debugger notifications')"
    steps:
      - checkout
      - run:
          name: Create and push tags
          command: |
            if [ -z "<< parameters.modules >>" ]; then
              echo "No modules specified. Please provide modules parameter."
              exit 1
            fi
            
            bash ./scripts/create_tags.sh << parameters.modules >>

  manual_maven_publish:
    executor:
      name: android/android-machine
      tag: 2024.01.1
    parameters:
      modules:
        type: string
        default: ""
        description: "Space-separated list of modules to publish (e.g., 'core debugger notifications')"
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Maven publish
          command: |
            if [ -z "<< parameters.modules >>" ]; then
              echo "No modules specified. Please provide modules parameter."
              exit 1
            fi
            
            bash ./scripts/maven_publish.sh << parameters.modules >>
      - android/save-gradle-cache

  manual_sync_repo:
    executor:
      name: android/android-machine
      tag: 2024.01.1
    steps:
      - checkout
      - run:
          name: Sync repository
          command: bash ./scripts/sync_repo.sh

workflows:
  build_and_test:
    when: # Execute only public repository
      equal: [ "https://github.com/plaidev/karte-android-sdk", << pipeline.project.git_url >> ]
    jobs:
      - test
  build_and_deploy:
    when:
      and:
        - not: # Don't execute public repository
            equal: [ "https://github.com/plaidev/karte-android-sdk", << pipeline.project.git_url >> ]
        - equal: [ "", << pipeline.parameters.workflow_name >> ] # Don't execute when manual workflow is triggered
    jobs:
      - test
      - publish_docs:
          filters:
            branches:
              only:
                - master
      - publish:
          requires:
            - test
          filters:
            branches:
              only:
                - master

  # Manual workflows for publish recovery
  manual_tag_workflow:
    when:
      and:
        - not:
            equal: [ "https://github.com/plaidev/karte-android-sdk", << pipeline.project.git_url >> ]
        - equal: [ manual_tag, << pipeline.parameters.workflow_name >> ]
    jobs:
      - manual_create_tags:
          modules: << pipeline.parameters.modules >>

  manual_publish_workflow:
    when:
      and:
        - not:
            equal: [ "https://github.com/plaidev/karte-android-sdk", << pipeline.project.git_url >> ]
        - equal: [ manual_publish, << pipeline.parameters.workflow_name >> ]
    jobs:
      - manual_maven_publish:
          modules: << pipeline.parameters.modules >>

  manual_sync_workflow:
    when:
      and:
        - not:
            equal: [ "https://github.com/plaidev/karte-android-sdk", << pipeline.project.git_url >> ]
        - equal: [ manual_sync, << pipeline.parameters.workflow_name >> ]
    jobs:
      - manual_sync_repo
